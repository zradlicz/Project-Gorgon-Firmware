; SDI-12 UART PIO Program
; Implements 1200 baud, 7 data bits, even parity, 1 stop bit
; Clock divider should be set for 1200 baud from 125MHz system clock

.program sdi12_tx
.side_set 1 opt

; Transmit 8 bits (7 data + 1 parity) with start and stop bits
; Based on standard UART TX, modified for SDI-12 inverted logic
; Data is pre-inverted in software, so:
; - Idle/stop = LOW (inverted from normal HIGH)
; - Start bit = HIGH (inverted from normal LOW)
; OUT pin 0 and side-set pin 0 are both mapped to the data pin

.wrap_target
    pull       side 0 [7]   ; Assert stop bit or stall with line in idle state (LOW for SDI-12)
    set x, 7   side 1 [7]   ; Preload bit counter, assert start bit (HIGH for SDI-12) for 8 clocks
bitloop:
    out pins, 1             ; Shift 1 bit from OSR to the OUT pin (1 cycle)
    jmp x-- bitloop   [6]   ; Each loop iteration is 8 cycles (1 + 6 + 1 for jmp)
.wrap


.program sdi12_rx
; Receive one byte (7 data bits + even parity + 1 stop bit)
; SDI-12: 1200 baud, LSB first, even parity
; Input on IN pin (with GPIO hardware inversion), pushes received byte to RX FIFO
; GPIO inversion makes SDI-12's inverted logic appear as standard UART logic to PIO

.wrap_target
start:
    wait 0 pin 0             ; Wait for start bit (LOW after GPIO inversion)
    set x, 6         [10]    ; Load bit counter (7 data bits), delay to center of first bit (11 cycles total)

bitloop:
    in pins, 1               ; Sample bit into ISR (1 cycle)
    jmp x-- bitloop  [6]     ; Decrement and loop (1 + 6 = 7 cycles) = 8 cycles per bit total

    ; Sample parity bit (even parity)
    in pins, 1       [6]     ; Sample parity bit (1 + 6 = 7 cycles)

    jmp pin good_stop        ; Check stop bit (should be HIGH after inversion)

    ; Framing error - wait for line to return to idle and don't push bad data
    wait 1 pin 0             ; Wait for line to return to idle (HIGH)
    jmp start                ; Restart without pushing

good_stop:
    push                     ; Push 8-bit result (7 data + 1 parity) to FIFO
.wrap
